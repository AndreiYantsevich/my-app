{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsForm/DialogsForm.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["MapStateToPropsWithRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","styles","dialogItem","id","name","Message","key","message","maxLength","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","type","button","Dialogs","dialogsElements","dialogs","map","dialog","messagesElements","messages","content","colLeft","colRight","formData","sendMessage","newMessageBody","compose","messagesPage","addMessageAC"],"mappings":"8NASMA,EAA8B,SAACC,GAAD,MAA4C,CAC5EC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAAmBC,GAAuC,IAChFC,EAD+E,uKAG7E,OAAQC,KAAKC,MAAMN,OAEb,kBAACG,EAAcE,KAAKC,OADpB,kBAAC,IAAD,CAAUC,GAAI,eAJyD,GACrDC,IAAML,WAOtC,OAAOM,YAAiDX,EAAjDW,CAA8EL,K,oBCpBzFM,EAAOC,QAAU,CAAC,QAAU,2B,gECA5BD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,8B,iHCiBlFC,EARI,SAACN,GAChB,OACI,yBAAKO,UAAWC,IAAOC,YACnB,kBAAC,IAAD,CAASR,GAAE,mBAAcD,EAAMU,KAAOV,EAAMW,Q,kBCCzCC,EANC,SAACZ,GACb,OACI,yBAAKa,IAAKb,EAAMU,GAAIH,UAAWC,IAAOM,SAAUd,EAAMc,U,mDCCxDC,EAAYC,YAAiB,IAmBpBC,cAA+B,CAE1CC,KAAM,eAFKD,EAjBuD,SAACjB,GAEnE,OACI,0BAAMO,UAAWC,IAAOU,KAAMC,SAAUnB,EAAMoB,cAC1C,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,SAAU,CAACC,IAAeV,GAC1BJ,KAAM,iBACNe,YAAY,4BAChB,4BACIC,KAAM,SACNpB,UAAWC,IAAOoB,QAFtB,mBC2BGC,EAhCC,SAAC7B,GAEb,IAAI8B,EAAkB9B,EAAM+B,QACvBC,KAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAYpB,IAAKoB,EAAOvB,GAAIA,GAAIuB,EAAOvB,GAAIC,KAAMsB,EAAOtB,UAEvEuB,EAAmBlC,EAAMmC,SACxBH,KAAI,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASD,IAAKC,EAAQJ,GAAII,QAASA,EAAQA,QAClCJ,GAAII,EAAQJ,QAMzC,OACI,yBAAKH,UAAWC,IAAOuB,SACnB,uCACA,yBAAKxB,UAAWC,IAAO4B,SAEnB,yBAAK7B,UAAWC,IAAO6B,SAClBP,GAGL,yBAAKvB,UAAWC,IAAO8B,UAClBJ,EAED,kBAAC,EAAD,CAAaf,SAhBZ,SAACoB,GACdvC,EAAMwC,YAAYD,EAASE,uB,wBCXpBC,4BACXvC,aARkB,SAACV,GACnB,MAAO,CACHsC,QAAStC,EAAMkD,aAAaZ,QAC5BI,SAAU1C,EAAMkD,aAAaR,YAO7B,CACIK,YAAaI,MAErBhD,IANW8C,CAObb","file":"static/js/4.f594935a.chunk.js","sourcesContent":["import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {AppRootStateType} from '../redux/redux-store';\nimport {connect} from 'react-redux';\n\ntype MapStateType = {\n    isAuth: boolean\n}\n\nconst MapStateToPropsWithRedirect = (state: AppRootStateType): MapStateType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = <P extends object>(Component: React.ComponentType<P>) => {\n    class RedirectComponent extends React.Component<MapStateType> {\n        render() {\n            return !this.props.isAuth\n                ? <Redirect to={'/login'}/>\n                : <Component {...this.props as P} />\n        }\n    }\n    return connect<MapStateType, null, P, AppRootStateType>(MapStateToPropsWithRedirect)(RedirectComponent)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__2oE78\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DialogsForm_form__2aWcC\",\"button\":\"DialogsForm_button__2uZ-b\",\"active\":\"DialogsForm_active__1Epjy\"};","import React from 'react';\nimport styles from './DialogItem.module.css';\nimport {NavLink} from 'react-router-dom';\n\n\nexport type DialogItemType = {\n    id: string\n    name: string\n}\n\nconst DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={styles.dialogItem}>\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    );\n};\n\nexport default DialogItem;","import React from 'react';\nimport styles from './Message.module.css';\n\nexport type MessageType = {\n    id: string\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div key={props.id} className={styles.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from 'react';\nimport styles from './DialogsForm.module.css';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../../common/FormControls/FormControls';\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\n\nexport type DialogsFormDataType = {\n    newMessageBody: string\n}\n\n// validate field max length\nconst maxLength = maxLengthCreator(50)\n\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormDataType>> = (props) => {\n\n    return (\n        <form className={styles.form} onSubmit={props.handleSubmit}>\n            <Field\n                component={Textarea}\n                validate={[requiredField, maxLength]}\n                name={'newMessageBody'}\n                placeholder=\"Write your message here\"/>\n            <button\n                type={'submit'}\n                className={styles.button}>Add message\n            </button>\n        </form>\n    )\n}\n\nexport default reduxForm<DialogsFormDataType>({\n    // a unique name for the form\n    form: 'messageForm'\n})(DialogsForm)","import React from 'react';\nimport styles from './Dialogs.module.css';\nimport DialogItem, {DialogItemType} from './DialogItem/DialogItem';\nimport Message, {MessageType} from './Message/Message';\nimport DialogsForm, {DialogsFormDataType} from './DialogsForm/DialogsForm';\n\nexport type DialogsType = {\n    dialogs: Array<DialogItemType>\n    updateNewMessage: (text: string) => void\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type MessagesType = {\n    messages: Array<MessageType>\n    newMessageText: string\n}\n\nconst Dialogs = (props: DialogsType & MessagesType) => {\n\n    let dialogsElements = props.dialogs\n        .map(dialog => <DialogItem key={dialog.id} id={dialog.id} name={dialog.name}/>)\n\n    let messagesElements = props.messages\n        .map(message => <Message key={message.id} message={message.message}\n                                 id={message.id}/>)\n\n    const onSubmit = (formData: DialogsFormDataType) => {\n        props.sendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={styles.dialogs}>\n            <h1>Dialogs</h1>\n            <div className={styles.content}>\n\n                <div className={styles.colLeft}>\n                    {dialogsElements}\n                </div>\n\n                <div className={styles.colRight}>\n                    {messagesElements}\n\n                    <DialogsForm onSubmit={onSubmit}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import {addMessageAC} from '../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppRootStateType} from '../../redux/redux-store';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {DialogItemType} from './DialogItem/DialogItem';\nimport {MessageType} from './Message/Message';\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<MapStateType, MapDispatchToPropsType, null, AppRootStateType>(\n        mapStateToProps,\n        {\n            sendMessage: addMessageAC\n        }),\n    withAuthRedirect\n)(Dialogs)\n\n\n// Types\ntype MapStateType = {\n    dialogs: Array<DialogItemType>\n    messages: Array<MessageType>\n}\n\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}"],"sourceRoot":""}