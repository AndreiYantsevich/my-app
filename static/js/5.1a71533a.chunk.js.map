{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","props","restProps","to","DialogItem","React","memo","className","style","dialog","active","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","AddMessageFormRedux","reduxForm","form","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogItems","formData","addMessage","newMessageText","compose","actions"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,kFCS1KC,EAAkB,SAACC,GAAD,MAA2B,CAC/CC,OAAQD,EAAME,KAAKD,SAYRE,IATf,SAA6BC,GAMzB,OAAOC,YAAQN,EAARM,EALiE,SAACC,GAAW,IAC3EL,EAAwBK,EAAxBL,OAAWM,EAD+D,YAClDD,EADkD,YAE/E,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,6FCA3BC,EARyBC,IAAMC,MAAK,SAACL,GAChD,OACI,qBAAKM,UAAWC,IAAMC,OAAS,IAAMD,IAAME,OAA3C,SACI,cAAC,IAAD,CAASP,GAAI,YAAcF,EAAMU,GAAjC,SAAsCV,EAAMW,YCEzCC,EANsBR,IAAMC,MAAK,SAACL,GAC7C,OACI,qBAAKM,UAAWC,IAAMM,QAAtB,SAAgCb,EAAMa,a,iCCDxCC,EAAcC,YAAiB,IAE/BC,EAAsDX,gBAAK,SAACL,GAC9D,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUV,KAAM,iBAC3BW,SAAU,CAACC,IAAeT,GAC1BU,YAAa,yBAExB,8BACI,kDAKHC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,CAAwDV,GCY5EY,EAzBgBvB,gBAAK,SAACL,GAEjC,IAAM6B,EAAkB7B,EAAM8B,QAAQA,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAERD,GAAIsB,EAAEtB,IADDsB,EAAEtB,OAEpEuB,EAAmBjC,EAAM8B,QAAQI,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASzB,GAAIyB,EAAEzB,GACNG,QAASsB,EAAEtB,SADIsB,EAAEzB,OAOnF,OACI,sBAAKJ,UAAWC,IAAMuB,QAAtB,UACI,qBAAKxB,UAAWC,IAAM6B,YAAtB,SACKP,IAEL,qBAAKvB,UAAWC,IAAM2B,SAAtB,SACKD,IAEL,cAACR,EAAD,CAAqBR,SAZP,SAACoB,GACnBrC,EAAMsC,WAAWD,EAASE,yB,kCCRnBC,sBACXzC,aANoB,SAACL,GACrB,MAAO,CACHoC,QAASpC,EAAMoC,WAIM,CAACQ,WAAYG,IAAQH,aAC9CzC,IAFW2C,CAGbZ","file":"static/js/5.1a71533a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1FIB7\",\"dialogItems\":\"Dialogs_dialogItems__208ha\",\"active\":\"Dialogs_active___85vC\",\"messages\":\"Dialogs_messages__WnFKO\",\"message\":\"Dialogs_message__1N5gB\"};","import React, {ComponentType, FC} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../store/store';\n\ntype MapStatePropsType = {\n    isAuth: boolean;\n}\ntype MapDispatchPropsType = {}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    isAuth: state.auth.isAuth\n} as MapStatePropsType);\n\nfunction WithAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent: FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>;\n    }\n    return connect(mapStateToProps)(RedirectComponent);\n}\n\nexport default WithAuthRedirect;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport style from './../Dialogs.module.css'\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<PropsType> = React.memo((props) => {\n    return (\n        <div className={style.dialog + ' ' + style.active}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n});\n\nexport default DialogItem;\n","import React from 'react';\nimport style from './../Dialogs.module.css'\n\ntype PropsType = {\n    message: string\n    id: number\n}\n\nconst Message: React.FC<PropsType> = React.memo((props) => {\n    return (\n        <div className={style.message}>{props.message}</div>\n    )\n});\n\nexport default Message;","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport React, {FC, memo} from 'react';\nimport {Textarea} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/Validators';\n\nexport type FormDataType = {\n    newMessageText: string\n}\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = memo((props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'newMessageText'}\n                       validate={[requiredField, maxLength50]}\n                       placeholder={'Enter your message'}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    );\n});\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {FC, memo} from 'react';\nimport style from './Dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {InitialStateType} from '../../store/reducers/dialogs-reducer';\nimport {AddMessageFormRedux, FormDataType} from './AddMessageForm/AddMessageForm';\n\ntype PropsType = {\n    dialogs: InitialStateType\n    addMessage: (newMessageText: string) => void\n}\n\nconst Dialogs: FC<PropsType> = memo((props) => {\n\n    const dialogsElements = props.dialogs.dialogs.map(d => <DialogItem name={d.name}\n                                                                       key={d.id}\n                                                                       id={d.id}/>)\n    const messagesElements = props.dialogs.messages.map(m => <Message id={m.id} key={m.id}\n                                                                      message={m.message}/>)\n\n    const addNewMessage = (formData: FormDataType) => {\n        props.addMessage(formData.newMessageText);\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogItems}>\n                {dialogsElements}\n            </div>\n            <div className={style.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    );\n});\n\nexport default Dialogs;","import Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../store/store';\nimport WithAuthRedirect from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {ComponentType} from 'react';\nimport {actions} from '../../store/reducers/dialogs-reducer';\n\nconst mapStateToProps = (state: RootStateType) => {\n    return {\n        dialogs: state.dialogs,\n    }\n}\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {addMessage: actions.addMessage}),\n    WithAuthRedirect\n)(Dialogs);"],"sourceRoot":""}