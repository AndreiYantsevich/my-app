{"version":3,"sources":["api/api.ts","redux/dialogsReducer.ts","utils/helpers/object-helpers.ts","redux/usersReducer.ts","components/Sidebar/Sidebar.module.css","assets/images/profile.jpg","assets/images/dialogs.jpg","assets/images/users.jpg","assets/images/news.jpg","assets/images/music.jpg","assets/images/friends.jpg","components/Sidebar/Banner/Banner.module.css","components/Footer/SocialLinks/SocialLinks.module.css","components/Sidebar/Nav/Nav.module.css","assets/images/loader.svg","types/types.ts","components/Login/LoginForm/LoginForm.module.css","components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","serviceWorker.ts","components/Sidebar/Banner/Banner.tsx","components/Sidebar/Nav/Nav.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Sidebar/Sidebar.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Friends/Friends.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","redux/appReducer.ts","components/App/App.tsx","redux/redux-store.ts","index.tsx","components/App/App.module.css","components/Header/Header.module.css","components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Footer/Footer.module.css","components/Footer/SocialLinks/SocialLink/SocialLink.module.css","components/Login/Login.module.css","components/common/Preloader/Preloader.module.css","redux/profileReducer.ts"],"names":["instance","axios","create","baseURL","withCredentials","headers","authAPI","me","get","then","response","data","login","email","password","rememberMe","captcha","post","logout","delete","usersAPI","getUsers","currentPage","pageSize","profileAPI","getUser","userId","getStatus","updateStatus","status","put","savePhoto","file","formData","FormData","append","saveProfile","profile","followAPI","unfollowUser","followUser","securityAPI","getCaptchaUrl","initialState","dialogs","id","v1","name","messages","message","addMessageAC","newMessageBody","type","dialogsReducer","state","action","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","users","totalUsersCount","isFetching","followingInProgress","followSuccessAC","unFollowSuccessAC","setCurrentPageAC","toggleIsFetchingAC","toggleFollowingInProgressAC","requestUsersTC","page","dispatch","a","totalCount","console","log","_followUnfollowFlow","apiMethod","actionCreator","resultCode","ResultCodeStatus","success","followUsersTC","bind","unfollowUsersTC","usersReducer","followed","filter","module","exports","Textarea","input","meta","touched","error","restProps","hasError","className","styles","formControl","textarea","errorMsg","Input","text","inputText","createField","validators","component","props","validate","Boolean","window","location","hostname","match","Banner","banner","src","image","alt","title","Nav","nav","to","link","activeClassName","activeLink","Header","header","loginBlock","isAuth","onClick","loginLink","captchaUrl","setAuthUserDataAC","getCaptchaUrlSuccessAC","payload","getAuthUserDataTC","getCaptchaUrlTC","url","authReducer","HeaderContainer","this","React","Component","connect","auth","Sidebar","sidebar","path","render","profileImg","dialogsImg","usersImg","newsImg","musicImg","friendsImg","SocialLink","socialLink","href","target","rel","SocialLinks","socialLinks","Footer","footer","copyright","News","news","Music","music","Friends","friends","reduxForm","form","handleSubmit","onSubmit","settings","requiredField","formRow","htmlFor","inputCheckbox","button","MapDispatchToProps","captchaIsRequired","length","stopSubmit","_error","section","initialized","appReducer","DialogsContainer","lazy","ProfileContainer","UsersContainer","App","catchAllUnhandledErrors","promiseRejectionEvent","initializeApp","addEventListener","removeEventListener","app","main","content","contentMain","exact","from","fallback","Preloader","compose","withRouter","promise","Promise","all","rootReducer","combineReducers","profilePage","profileReducer","messagesPage","usersPage","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","wrapper","preloader","img","value","maxLengthCreator","maxLength","ADD_POST","posts","likesCounter","addPostAC","newPostBody","setStatusAC","setUserProfileTC","getUserStatusTC","updateStatusTC","savePhotoTC","photos","saveProfileTC","getState","reject","newPost"],"mappings":"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","file":"static/js/main.5696830b.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n    APIResponseType,\n    PhotosType,\n    ProfileType,\n    UserType\n} from '../types/types';\n\n// axios general settings, axios params -> baseUrl and config\n// instance makes auto concat for baseUrl and another axios config\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '7e5b4528-2880-4677-b629-b878b7697787'\n    }\n})\n\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<{ id: string, email: string, login: string }>>(`/auth/me`)\n            .then(response => response.data)\n    },\n\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\n        return instance.post<APIResponseType<{ userId: string }>>(`/auth/login`, {\n            email,\n            password,\n            rememberMe,\n            captcha\n        })\n            .then(response => response.data)\n    },\n\n    logout() {\n        return instance.delete<APIResponseType>(`/auth/login`)\n            .then(response => response.data)\n    }\n}\n\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get<GetUsersResponseType>(`/users?page=${currentPage}&count=${pageSize}&sortOrder=asc`)\n            .then(response => response.data)\n    }\n\n}\n\nexport const profileAPI = {\n    getUser(userId: string) {\n        return instance.get<ProfileType>(`/profile/${userId}`)\n            .then(response => response.data)\n    },\n\n    getStatus(userId: string) {\n        return instance.get<string>(`/profile/status/${userId}`)\n            .then(response => response.data)\n    },\n\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`/profile/status`, {status})\n            .then(response => response.data)\n    },\n\n    savePhoto(file: File) {\n        let formData = new FormData()\n        formData.append('image', file)\n        return instance.put<APIResponseType<{ photos: PhotosType }>>(`/profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(response => response.data)\n    },\n\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`/profile`, profile)\n            .then(response => response.data)\n    }\n}\n\nexport const followAPI = {\n    unfollowUser(userId: string) {\n        return instance.delete<APIResponseType>(`/follow/${userId}`)\n            .then(response => response.data)\n    },\n\n    followUser(userId: string) {\n        return instance.post<APIResponseType>(`/follow/${userId}`)\n            .then(response => response.data)\n    }\n\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<{ url: string }>('/security/get-captcha-url')\n            .then(response => response.data)\n    }\n\n}\n\n\n//Types\ntype GetUsersResponseType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string\n}\n\n\n\n\n\n","import {v1} from 'uuid';\n\nconst ADD_MESSAGE = 'dialogs/ADD_MESSAGE';\n\nconst initialState = {\n    dialogs: [\n        {id: v1(), name: 'Jack'},\n        {id: v1(), name: 'Nick'},\n        {id: v1(), name: 'Alex'},\n    ],\n    messages: [\n        {id: v1(), message: 'Hi! How are you?'},\n        {id: v1(), message: 'I am fine! And you?'},\n        {id: v1(), message: 'Me too. Have a nice day!'},\n        {id: v1(), message: ':)'},\n    ]\n}\n\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): InitialStateType => {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: v1(), message: action.newMessageBody}]\n            }\n        default:\n            return state\n    }\n}\n\n//Action\nexport const addMessageAC = (newMessageBody: string) =>\n    ({type: ADD_MESSAGE, newMessageBody} as const)\n\nexport default dialogsReducer;\n\n\n//Types\ntype InitialStateType = typeof initialState;\nexport type DialogsActionsType = ReturnType<typeof addMessageAC>;","import {UserType} from '../../types/types';\r\n\r\nexport const updateObjectInArray = (items: Array<UserType>, itemId: string, objPropName: keyof UserType, newObjProps: Object) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {followAPI, usersAPI} from '../api/api';\nimport {APIResponseType, ResultCodeStatus, UserType} from '../types/types';\nimport {ThunkType} from './redux-store';\nimport {Dispatch} from 'react';\nimport {updateObjectInArray} from '../utils/helpers/object-helpers';\n\nconst FOLLOW = 'users/FOLLOW'\nconst UNFOLLOW = 'users/UNFOLLOW'\nconst SET_USERS = 'users/SET_USERS'\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE'\nconst SET_TOTAL_COUNT = 'users/SET_TOTAL_COUNT'\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING'\nconst TOGGLE_FOLLOWING_PROGRESS = 'users/TOGGLE_FOLLOWING_PROGRESS'\n\nconst initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>\n}\n\nconst usersReducer = (state = initialState, action: UsersActionsType): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case SET_USERS:\n            return {...state, users: action.users}\n        case SET_CURRENT_PAGE:\n            return {...state, currentPage: action.currentPage}\n        case SET_TOTAL_COUNT:\n            return {...state, totalUsersCount: action.totalCount}\n        case TOGGLE_IS_FETCHING:\n            return {...state, isFetching: action.isFetching}\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state\n    }\n}\n\n\n//Actions\nexport const followSuccessAC = (userId: string) =>\n    ({type: FOLLOW, userId} as const)\nexport const unFollowSuccessAC = (userId: string) =>\n    ({type: UNFOLLOW, userId} as const)\nexport const setUsersAC = (users: Array<UserType>) =>\n    ({type: SET_USERS, users} as const)\nexport const setCurrentPageAC = (currentPage: number) =>\n    ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setTotalCountAC = (totalCount: number) =>\n    ({type: SET_TOTAL_COUNT, totalCount} as const)\nexport const toggleIsFetchingAC = (isFetching: boolean) =>\n    ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingInProgressAC = (isFetching: boolean, userId: number) =>\n    ({type: TOGGLE_FOLLOWING_PROGRESS, isFetching, userId} as const)\n\n\n//Thunks\nexport const requestUsersTC = (page: number, pageSize: number): ThunkType => async dispatch => {\n    try {\n        // show preloader\n        dispatch(toggleIsFetchingAC(true))\n        dispatch(setCurrentPageAC(page))\n        const response = await usersAPI.getUsers(page, pageSize)\n        // hide preloader\n        dispatch(toggleIsFetchingAC(false))\n        dispatch(setUsersAC(response.items))\n        dispatch(setTotalCountAC(response.totalCount))\n    } catch (error) {\n        console.log(error)\n    }\n}\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>, userId: string, apiMethod: (userId: string) => Promise<APIResponseType>, actionCreator: (userID: string) => UsersActionsType) => {\n    try {\n        // disable btn during server response\n        dispatch(toggleFollowingInProgressAC(true, +userId))\n        const response = await apiMethod(userId)\n        if (response.resultCode === ResultCodeStatus.success) {\n            dispatch(actionCreator(userId))\n        }\n        // activate btn after server response\n        dispatch(toggleFollowingInProgressAC(false, +userId))\n    } catch (error) {\n        console.log(error)\n    }\n\n}\nexport const followUsersTC = (userId: string): ThunkType => async dispatch => {\n    await _followUnfollowFlow(dispatch, userId, followAPI.followUser.bind(followAPI), followSuccessAC)\n}\nexport const unfollowUsersTC = (userId: string): ThunkType => async dispatch => {\n    await _followUnfollowFlow(dispatch, userId, followAPI.unfollowUser.bind(followAPI), unFollowSuccessAC)\n}\n\nexport default usersReducer;\n\n\n//Types\ntype InitialStateType = typeof initialState;\nexport type UsersActionsType =\n    ReturnType<typeof followSuccessAC> |\n    ReturnType<typeof unFollowSuccessAC> |\n    ReturnType<typeof setUsersAC> |\n    ReturnType<typeof setCurrentPageAC> |\n    ReturnType<typeof setTotalCountAC> |\n    ReturnType<typeof toggleIsFetchingAC> |\n    ReturnType<typeof toggleFollowingInProgressAC>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1oiXV\"};","module.exports = __webpack_public_path__ + \"static/media/profile.6be79ee3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dialogs.6fe6dff8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/users.9a90444d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/news.de3167ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/music.3e4441df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/friends.50d16565.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Banner_banner__1ox2x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__38whE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3C39h\",\"link\":\"Nav_link__2qWFD\",\"activeLink\":\"Nav_activeLink__394vJ\"};","module.exports = __webpack_public_path__ + \"static/media/loader.5613c226.svg\";","import {PostType} from '../components/Profile/MyPosts/MyPosts';\n\nexport type APIResponseType<D = {}, RC = ResultCodeStatus> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n\nexport type MapDispatchToPropsPostsType = (\n    args: {\n        type: string;\n        newText?: string;\n    }) => void\n\nexport enum ResultCodeStatus {\n    'success' = 0,\n    'error' = 1,\n    'captchaIsRequired' = 10\n}\n\n//ProfileTypes\nexport const userProfile: ProfileType = {\n    userId: 1,\n    lookingForAJob: false,\n    lookingForAJobDescription: '',\n    fullName: '',\n    aboutMe: '',\n    contacts: {\n        github: '',\n        vk: '',\n        facebook: '',\n        instagram: '',\n        twitter: '',\n        website: '',\n        youtube: '',\n        mainLink: ''\n    },\n    photos: {\n        small: '',\n        large: ''\n    }\n}\n\nexport type ProfileType = {\n    userId: number\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\nexport type PhotosType = {\n    small: null | string\n    large: null | string\n}\n\nexport type ContactsType = {\n    github: null | string\n    vk: null | string\n    facebook: null | string\n    instagram: null | string\n    twitter: null | string\n    website: null | string\n    youtube: null | string\n    mainLink: null | string\n}\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    profile: ProfileType\n    status: string\n}\n\n//UsersTypes\nexport type UsersPageType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nexport type UserType = {\n    name: string\n    id: string\n    photos: {\n        small?: string\n        large?: string\n    }\n    followed: boolean\n    status: string\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"LoginForm_settings__1Q2NN\",\"formRow\":\"LoginForm_formRow__run0D\",\"button\":\"LoginForm_button__3uNqO\",\"errorMsg\":\"LoginForm_errorMsg__1OYMz\"};","import React from 'react';\nimport styles from './FormControls.module.css';\nimport {Field, WrappedFieldProps} from 'redux-form';\nimport {RequiredFieldType} from '../../../utils/validators/validators';\n\ntype OwnPropsType = {\n    text: string\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = ({\n                                                          input,\n                                                          meta: {touched, error},\n                                                          ...restProps\n                                                      }) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <textarea {...input} className={styles.textarea} {...restProps}/>\n            <span className={styles.errorMsg}>{hasError && error}</span>\n        </div>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps & OwnPropsType> = ({\n                                                                      input,\n                                                                      meta: {\n                                                                          touched,\n                                                                          error\n                                                                      },\n                                                                      text,\n                                                                      ...restProps\n                                                                  }) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <input {...input} className={styles.inputText} {...restProps}/>\n            <span className={styles.errorMsg}>{hasError && error}</span>\n        </div>\n    )\n}\n\n\nexport function createField<FormKeysType extends string>(name: FormKeysType, validators: RequiredFieldType[], component: React.FC<WrappedFieldProps & OwnPropsType>, props = {}, text?: string) {\n    return <>\n        <Field\n            name={name}\n            validate={validators}\n            component={component}\n            {...props}\n        />{text}\n    </>;\n}\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"FormControls_textarea__2XnMZ\",\"inputText\":\"FormControls_inputText__Jsp5o\",\"formControl\":\"FormControls_formControl__1_tJx\",\"error\":\"FormControls_error__jcdfe\",\"errorMsg\":\"FormControls_errorMsg__1A9DO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styles from './Banner.module.css';\n\ntype BannerType = {\n    title?: string\n    image: string\n}\n\nconst Banner = (props: BannerType) => {\n    return (\n        <div className={styles.banner}>\n            <img src={props.image} alt={props.title}/>\n        </div>\n    )\n}\n\nexport default Banner;","import React from 'react';\nimport styles from './Nav.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst Nav = () => {\n    return (\n        <nav className={styles.nav}>\n            <NavLink to=\"/profile\" className={styles.link}\n                     activeClassName={styles.activeLink}>Profile</NavLink>\n            <NavLink to=\"/dialogs\" className={styles.link}\n                     activeClassName={styles.activeLink}>Dialogs</NavLink>\n            <NavLink to=\"/users\" className={styles.link}\n                     activeClassName={styles.activeLink}>Users</NavLink>\n            <NavLink to=\"/news\" className={styles.link}\n                     activeClassName={styles.activeLink}>News</NavLink>\n            <NavLink to=\"/music\" className={styles.link}\n                     activeClassName={styles.activeLink}>Music</NavLink>\n            <NavLink to=\"/friends\" className={styles.link}\n                     activeClassName={styles.activeLink}>Friends</NavLink>\n        </nav>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport styles from './Header.module.css';\nimport {NavLink} from 'react-router-dom';\n\nexport type HeaderPropsType = {\n    isAuth: boolean\n    login: any\n    logout: any\n}\n\nconst Header = (props: HeaderPropsType) => {\n\n    return (\n        <header className={styles.header}>\n            <h3 className={styles.title}>Social Network <span>by Andrey Yantsevich</span>\n            </h3>\n\n            <div className={styles.loginBlock}>\n\n                {props.isAuth\n                    ? <div>Hello, {props.login}! <br/><span onClick={props.logout}\n                                                            className={styles.logout}>Logout</span>\n                    </div>\n                    : <NavLink className={styles.loginLink} to={'/login'}>Login</NavLink>}\n\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import {authAPI, securityAPI} from '../api/api';\nimport {ResultCodeStatus} from '../types/types';\nimport {stopSubmit} from 'redux-form';\nimport {ThunkType} from './redux-store';\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS';\n\nconst initialState = {\n    userId: null as string | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null\n}\n\nconst authReducer = (state = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {...state, ...action.data}\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {...state, ...action.payload}\n        default:\n            return state\n    }\n}\n\n\n//Actions\nexport const setAuthUserDataAC = (userId: null | string, email: null | string, login: null | string, isAuth: boolean) =>\n    ({type: SET_USER_DATA, data: {userId, email, login, isAuth}} as const)\nexport const getCaptchaUrlSuccessAC = (captchaUrl: string) =>\n    ({type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}} as const)\n\n\n// Thunks\nexport const getAuthUserDataTC = (): ThunkType => async dispatch => {\n    try {\n        const response = await authAPI.me()\n        if (response.resultCode === ResultCodeStatus.success) {\n            const {id, login, email} = response.data\n            dispatch(setAuthUserDataAC(id, email, login, true))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async dispatch => {\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n    if (response.resultCode === ResultCodeStatus.success) {\n        dispatch(getAuthUserDataTC())\n    } else {\n        if (response.resultCode === ResultCodeStatus.captchaIsRequired) {\n            dispatch(getCaptchaUrlTC())\n        }\n        // get error message from server\n        const message = response.messages.length > 0 ? response.messages[0] : 'Some Error'\n        // stop form submit if fields are wrong\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\nexport const getCaptchaUrlTC = (): ThunkType => async dispatch => {\n    try {\n        const response = await securityAPI.getCaptchaUrl()\n        const captchaUrl = response.url\n        dispatch(getCaptchaUrlSuccessAC(captchaUrl))\n    } catch (error) {\n        console.log(error)\n    }\n\n}\nexport const logoutTC = (): ThunkType => async dispatch => {\n    try {\n        const response = await authAPI.logout()\n        if (response.resultCode === ResultCodeStatus.success) {\n            dispatch(setAuthUserDataAC(null, null, null, false))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport default authReducer;\n\n\n// Types\nexport type InitialStateType = typeof initialState;\nexport type AuthActionsType =\n    ReturnType<typeof setAuthUserDataAC> |\n    ReturnType<typeof getCaptchaUrlSuccessAC>\n\n\n","import React from 'react';\nimport Header from './Header';\nimport {connect} from 'react-redux';\nimport {AppRootStateType} from '../../redux/redux-store';\nimport {logoutTC} from '../../redux/authReducer';\n\n\ntype MSTPType = {\n    isAuth: boolean\n    login: string | null\n}\n\ntype MDTPType = {\n    logout: () => void\n}\n\nexport type UserAuthOwnPropsType = MSTPType & MDTPType\n\n\nclass HeaderContainer extends React.Component<UserAuthOwnPropsType> {\n\n    render() {\n        return (\n            <Header isAuth={this.props.isAuth} login={this.props.login}\n                    logout={this.props.logout}/>\n        )\n    }\n}\n\n\nconst MapStateToProps = (state: AppRootStateType): MSTPType => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n})\nexport default connect(MapStateToProps, {logout: logoutTC})(HeaderContainer);","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport styles from './Sidebar.module.css';\n\nimport profileImg from '../../assets/images/profile.jpg';\nimport dialogsImg from '../../assets/images/dialogs.jpg';\nimport usersImg from '../../assets/images/users.jpg';\nimport newsImg from '../../assets/images/news.jpg';\nimport musicImg from '../../assets/images/music.jpg';\nimport friendsImg from '../../assets/images/friends.jpg';\n\nimport Banner from './Banner/Banner';\nimport Nav from './Nav/Nav';\nimport HeaderContainer from '../Header/HeaderContainer';\n\nconst Sidebar = () => {\n    return (\n        <div className={styles.sidebar}>\n            <Route path=\"/profile\"\n                   render={() => <Banner image={profileImg} title={'Profile'}/>}/>\n            <Route path=\"/dialogs\"\n                   render={() => <Banner image={dialogsImg} title={'Dialogs'}/>}/>\n            <Route path=\"/users\"\n                   render={() => <Banner image={usersImg} title={'Users'}/>}/>\n            <Route path=\"/news\" render={() => <Banner image={newsImg} title={'News'}/>}/>\n            <Route path=\"/music\"\n                   render={() => <Banner image={musicImg} title={'Music'}/>}/>\n            <Route path=\"/friends\"\n                   render={() => <Banner image={friendsImg} title={'Friends'}/>}/>\n\n            <HeaderContainer/>\n            <Nav/>\n        </div>\n    )\n}\n\nexport default Sidebar;","import React from 'react';\nimport styles from './SocialLink.module.css';\n\ntype Props = {\n    link: string,\n    title: string\n}\n\nconst SocialLink = ({link, title}: Props) => {\n    return (\n        <div className={styles.socialLink}>\n            <a className={styles.link} href={link} target=\"_blank\"\n               rel=\"noopener noreferrer\">{title}</a>\n        </div>\n    )\n}\n\nexport default SocialLink;","import React from 'react';\nimport styles from './SocialLinks.module.css';\nimport SocialLink from './SocialLink/SocialLink';\n\nconst SocialLinks = () => {\n    return (\n        <section className={styles.socialLinks}>\n            <SocialLink link={'https://www.linkedin.com/in/yantsev1ch/'}\n                        title=\"LinkedIn\"/>\n            <SocialLink link={'https://github.com/yantsev1ch'} title=\"Github\"/>\n            <SocialLink link={'https://t.me/yantsev1ch'} title=\"Telegram\"/>\n        </section>\n    )\n}\n\nexport default SocialLinks;","import React from 'react';\nimport styles from './Footer.module.css';\nimport SocialLinks from './SocialLinks/SocialLinks';\n\nconst Footer = () => {\n    return (\n        <div className={styles.footer}>\n            <SocialLinks/>\n            <p className={styles.copyright}>© Created by Andrey Yantsevich</p>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport styles from './News.module.css';\n\nconst News = () => {\n    return (\n        <div className={styles.news}>\n            <h1>News</h1>\n        </div>\n    )\n}\n\nexport default News;","import React from 'react';\nimport styles from './Music.module.css';\n\nconst Music = () => {\n    return (\n        <div className={styles.music}>\n            <h1>Music</h1>\n        </div>\n    )\n}\n\nexport default Music;","import React from 'react';\nimport styles from './Friends.module.css';\n\nconst Friends = () => {\n    return (\n        <div className={styles.friends}>\n            <h1>Friends</h1>\n        </div>\n    )\n}\n\nexport default Friends;","import React from 'react';\nimport styles from './LoginForm.module.css';\nimport {InjectedFormProps, reduxForm} from 'redux-form';\nimport {createField, Input} from '../../common/FormControls/FormControls';\nimport {requiredField} from '../../../utils/validators/validators';\n\nexport type LoginFormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormDataType, string>\n\ntype OwnPropsType = {\n    captchaUrl: string | null\n}\n\ntype ErrorType = {\n    error: string\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, OwnPropsType, ErrorType> & OwnPropsType> = ({\n                                                                                                               handleSubmit,\n                                                                                                               captchaUrl,\n                                                                                                               error\n                                                                                                           }) => {\n    return (\n        <form className={styles.form} onSubmit={handleSubmit}>\n            <div className={styles.settings}>\n                <p>\n                    To log in get registered <a href={'https://social-network.samuraijs.com/'}\n                                                target={'_blank'}>here</a>\n                </p>\n                <p>\n                    or use common test account credentials:\n                </p>\n                <p> Email: free@samuraijs.com\n                </p>\n                <p>\n                    Password: free\n                </p>\n            </div>\n\n            {error && <p className={styles.errorMsg}>{error}</p>}\n\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('captcha', [requiredField], Input)}\n\n            <div className={styles.formRow}>\n                <label htmlFor=\"login_login\">Login</label>\n                {createField<LoginFormValuesTypeKeys>('email', [requiredField], Input)}\n            </div>\n            <div className={styles.formRow}>\n                <label htmlFor=\"login_psw\">Password</label>\n                {createField<LoginFormValuesTypeKeys>('password', [requiredField], Input, {type: 'password'})}\n            </div>\n            <div className={styles.formRow}>\n                {createField<LoginFormValuesTypeKeys>('rememberMe', [], Input, {\n                    type: 'checkbox',\n                    className: styles.inputCheckbox\n                }, 'Remember me')}\n            </div>\n            <div className={styles.formRow}>\n                <button\n                    type={'submit'}\n                    className={styles.button}>Send\n                </button>\n            </div>\n        </form>\n    )\n}\n\n\nexport default reduxForm<LoginFormDataType, OwnPropsType, ErrorType>({\n    // a unique name for the form\n    form: 'login'\n})(LoginForm)","import React from 'react';\nimport styles from './Login.module.css';\nimport LoginForm, {LoginFormDataType} from './LoginForm/LoginForm';\nimport {connect} from 'react-redux';\nimport {loginTC} from '../../redux/authReducer';\nimport {Redirect} from 'react-router-dom';\nimport {AppRootStateType} from '../../redux/redux-store';\n\nexport type MapDispatchType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\nexport type MapStateType = ReturnType<typeof mapStateToProps>\n\ntype PropsType = MapDispatchType & MapStateType\n\nconst Login: React.FC<PropsType> = ({login, captchaUrl, isAuth}) => {\n    const onSubmit = (formData: LoginFormDataType) => {\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={styles.login}>\n            <h1>Login</h1>\n            <section className={styles.section}>\n                <LoginForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\n            </section>\n        </div>\n    )\n}\n\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        captchaUrl: state.auth.captchaUrl,\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst MapDispatchToProps: MapDispatchType = {\n    login: loginTC\n}\n\nexport default connect(mapStateToProps, MapDispatchToProps)(Login)","import {ThunkType} from './redux-store';\nimport {getAuthUserDataTC} from './authReducer';\n\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\n\nconst initialState = {\n    initialized: false\n}\n\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {...state, initialized: true}\n        default:\n            return state\n    }\n}\n\n\n//Actions\nexport const initializedSuccessAC = () => ({type: INITIALIZED_SUCCESS} as const)\n\n\n//Thunks\nexport const initializeAppTC = (): ThunkType => async dispatch => {\n    try {\n        const promise = dispatch(getAuthUserDataTC())\n        await Promise.all([promise])\n        dispatch(initializedSuccessAC())\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport default appReducer;\n\n\n//Types\ntype InitialStateType = typeof initialState;\nexport type AppActionsType = ReturnType<typeof initializedSuccessAC>;","import React, {Suspense} from 'react';\nimport styles from './App.module.css';\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router';\nimport Sidebar from '../Sidebar/Sidebar';\nimport Footer from '../Footer/Footer';\nimport News from '../News/News';\nimport Music from '../Music/Music';\nimport Friends from '../Friends/Friends';\nimport Login from '../Login/Login';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {initializeAppTC} from '../../redux/appReducer';\nimport {AppRootStateType} from '../../redux/redux-store';\nimport Preloader from '../common/Preloader/Preloader';\n\nconst DialogsContainer = React.lazy(() => import('../Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('../Profile/ProfileContainer'));\nconst UsersContainer = React.lazy(() => import('../Users/UsersContainer'));\n\n\nclass App extends React.Component<OwnPropsType> {\n\n    // catch all server errors\n    catchAllUnhandledErrors = function (promiseRejectionEvent: Event) {\n        console.log('Some error occured')\n        console.log(promiseRejectionEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandlesrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandlesrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className={styles.app}>\n                <main className={styles.main}>\n                    <div className={styles.sidebar}>\n                        <Sidebar/>\n                    </div>\n\n                    <div className={styles.content}>\n                        <div className={styles.contentMain}>\n                            <Switch>\n                                <Redirect exact from=\"/\" to=\"/profile\"/>\n                                <Route path=\"/login\" render={() => <Login/>}/>\n                                <Route path=\"/profile/:userId?\"\n                                       render={() => <Suspense fallback={\n                                           <Preloader/>}><ProfileContainer/></Suspense>}/>\n                                <Route path=\"/dialogs\"\n                                       render={() => <Suspense fallback={\n                                           <Preloader/>}><DialogsContainer/></Suspense>}/>\n                                <Route path=\"/users\"\n                                       render={() => <Suspense fallback={\n                                           <Preloader/>}><UsersContainer/></Suspense>}/>\n                                <Route path=\"/news\" render={() => <News/>}/>\n                                <Route path=\"/music\" render={() => <Music/>}/>\n                                <Route path=\"/friends\" render={() => <Friends/>}/>\n                                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                            </Switch>\n                        </div>\n                        <div className={styles.footer}>\n                            <Footer/>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        )\n    }\n}\n\nconst MapStateToProps = (state: AppRootStateType): MSTPType => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect<MSTPType, MDTPType, null, AppRootStateType>(MapStateToProps, {initializeApp: initializeAppTC}))(App)\n\n\n// TYPES\ntype MDTPType = {\n    initializeApp: () => void\n}\n\ntype MSTPType = {\n    initialized: boolean\n}\n\ntype AppPropsType = MDTPType & MSTPType\n\ntype PathParamsType = {}\n\ntype OwnPropsType = RouteComponentProps<PathParamsType> & AppPropsType\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport profileReducer, {ProfileActionsType} from './profileReducer';\nimport dialogsReducer, {DialogsActionsType} from './dialogsReducer';\nimport appReducer, {AppActionsType} from './appReducer';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\nimport {reducer as formReducer} from 'redux-form'\nimport authReducer, {AuthActionsType} from './authReducer';\nimport usersReducer, {UsersActionsType} from './usersReducer';\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\nexport type AppRootActionsType =\n    AppActionsType |\n    AuthActionsType |\n    DialogsActionsType |\n    ProfileActionsType |\n    UsersActionsType\nexport type ThunkType = ThunkAction<Promise<void>, AppRootStateType, unknown, AppRootActionsType>;\nexport default store;\n\n// dev debugger store\n// @ts-ignore\nwindow.store = store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/redux-store';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1Je8e\",\"main\":\"App_main__2Bb2U\",\"sidebar\":\"App_sidebar__2aZqf\",\"content\":\"App_content__2C8oy\",\"contentMain\":\"App_contentMain__3n_89\",\"footer\":\"App_footer__cC4pk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3N5LP\",\"title\":\"Header_title__2MH6S\",\"loginBlock\":\"Header_loginBlock__1_lba\",\"loginLink\":\"Header_loginLink__16unK\",\"logout\":\"Header_logout__Y-sqo\"};","import React from 'react';\nimport styles from './Preloader.module.css';\nimport preloader from '../../../assets/images/loader.svg';\n\nconst Preloader = () => {\n    return (\n        <div className={styles.wrapper}>\n            <img src={preloader} className={styles.img} alt=\"loader\"/>\n        </div>\n    )\n}\n\nexport default Preloader;","export type RequiredFieldType = typeof requiredField\n\nexport const requiredField = (value: string) => {\n    if (value) return undefined\n    return 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copyright\":\"Footer_copyright__19Rzc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__3h2HL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Login_section__1CXTH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__2h-ht\",\"img\":\"Preloader_img__2_Qxq\"};","import {v1} from 'uuid'\nimport {profileAPI} from '../api/api';\nimport {PhotosType, ProfileType, ResultCodeStatus, userProfile} from '../types/types';\nimport {stopSubmit} from 'redux-form';\nimport {ThunkType} from './redux-store';\n\nconst ADD_POST = 'profile/ADD_POST'\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE'\nconst SET_STATUS = 'profile/SET_STATUS'\nconst SAVE_PHOTO = 'profile/SAVE_PHOTO'\n\nconst initialState = {\n    posts: [\n        {id: v1(), message: 'Hi World! How are you?', likesCounter: 75},\n        {id: v1(), message: 'Today is a good day!', likesCounter: 57},\n    ],\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action: ProfileActionsType): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            let newPost = {id: v1(), message: action.newPostBody, likesCounter: 0};\n            return {\n                ...state,\n                posts: [newPost, ...state.posts]\n            }\n        case SET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        case SAVE_PHOTO:\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state\n    }\n}\n\n\n//Actions\nexport const addPostAC = (newPostBody: string) =>\n    ({type: ADD_POST, newPostBody} as const)\nexport const setUserProfileAC = (profile: ProfileType) =>\n    ({type: SET_USER_PROFILE, profile} as const)\nexport const setStatusAC = (status: string) =>\n    ({type: SET_STATUS, status} as const)\nexport const savePhotoAC = (photos: PhotosType) =>\n    ({type: SAVE_PHOTO, photos} as const)\n\n\n//Thunks\nexport const setUserProfileTC = (userId: string): ThunkType => async dispatch => {\n    try {\n        const response = await profileAPI.getUser(userId)\n        dispatch(setUserProfileAC(response))\n    } catch (error) {\n        console.log(error)\n    }\n\n}\nexport const getUserStatusTC = (userId: string): ThunkType => async dispatch => {\n    try {\n        const response = await profileAPI.getStatus(userId)\n        dispatch(setStatusAC(response))\n    } catch (error) {\n        console.log(error)\n    }\n\n}\nexport const updateStatusTC = (status: string): ThunkType => async dispatch => {\n    try {\n        const response = await profileAPI.updateStatus(status)\n        if (response.resultCode === ResultCodeStatus.success) {\n            dispatch(setStatusAC(status))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const savePhotoTC = (file: File): ThunkType => async dispatch => {\n    try {\n        const response = await profileAPI.savePhoto(file)\n        if (response.resultCode === ResultCodeStatus.success) {\n            dispatch(savePhotoAC(response.data.photos))\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const saveProfileTC = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const response = await profileAPI.saveProfile(profile)\n    const userId = getState().auth.userId\n    if (response.resultCode === ResultCodeStatus.success) {\n        if (userId) {\n            dispatch(setUserProfileTC(userId))\n        }\n    } else {\n        // get error message from server\n        const message = response.messages.length > 0 ? response.messages[0] : 'Some Error'\n        // stop form submit if fields are wrong\n        dispatch(stopSubmit('edit-profile', {_error: message}))\n        return Promise.reject(message)\n    }\n}\n\nexport default profileReducer;\n\n\n//Types\ntype InitialStateType = typeof initialState;\nexport type ProfileActionsType =\n    ReturnType<typeof addPostAC> |\n    ReturnType<typeof setUserProfileAC> |\n    ReturnType<typeof setStatusAC> |\n    ReturnType<typeof savePhotoAC>\n\n\n\n\n\n"],"sourceRoot":""}